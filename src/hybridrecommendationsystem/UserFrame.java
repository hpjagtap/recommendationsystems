/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hybridrecommendationsystem;

import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Elcot
 */
public class UserFrame extends javax.swing.JFrame {

    /**
     * Creates new form UserFrame
     */
    
    String name,adrss,inters;
    DBConnection dbn=new DBConnection();
    Statement st=dbn.stt;
    ArrayList CollaborativeFiteringResults=new ArrayList();
    ArrayList ContentBasedFilteringResults=new ArrayList();
    int cou1=0,cou2=0,cou3=0;
    CollaborativeResults cr;
    ContentBasedResults cbr;
    HybridResults hr;
    
    public UserFrame(String na, String ad, String intere) {
        initComponents();
        name=na;
        adrss=ad;
        inters=intere;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 102, 0));

        jLabel1.setFont(new java.awt.Font("Castellar", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("User");

        jButton1.setText("Logout");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(250, 250, 250)
                .addComponent(jButton1)
                .addGap(64, 64, 64))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(1, 1, 1))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Mens Fashion", "Womens Fashion", "Beauty, Health, Grocery", "Books", "Movies, Music & Video Games", "Sports, Fitness, Bags, Luggage", "Mobiles, Computers", "Gift Cards", "Toys, Baby Products, Kids Fashion", "Home, Kitchen, Pets", "Global Store", "TV, Appliances, Electronics", "Car, Motorbike, Industrial" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jButton2.setText("Submit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Clear");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Choose Your Interests", jPanel2);

        jLabel2.setText("Choose Domain Name:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<--Select-->", "Mens Fashion", "Womens Fashion", "Beauty, Health, Grocery", "Books", "Movies, Music & Video Games", "Sports, Fitness, Bags, Luggage", "Mobiles, Computers", "Gift Cards", "Toys, Baby Products, Kids Fashion", "Home, Kitchen, Pets", "Global Store", "TV, Appliances, Electronics", "Car, Motorbike, Industrial" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jLabel3.setText("Choose Item Name:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<--Select-->" }));
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });

        jLabel4.setText("Item Company:");

        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField1MouseClicked(evt);
            }
        });

        jLabel5.setText("Description:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jLabel6.setText("Popularity:");

        jLabel7.setText("Your Review:");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<--Select-->", "Very Good", "Good", "Bad", "Very Bad" }));

        jButton4.setText("Submit");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Clear");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField2)
                            .addComponent(jComboBox3, 0, 340, Short.MAX_VALUE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane2)
                    .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1)
                    .addComponent(jComboBox1, 0, 496, Short.MAX_VALUE))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(16, 16, 16)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jButton4))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("View Items", jPanel3);

        jButton6.setText("View Your Hybrid Recommended Results");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        jButton7.setText("Collaborative Filtering Results");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Content Based Filtering Results");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Hybrid Results");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButton7)
                        .addGap(18, 18, 18)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Hybrid Recommendation", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(cou1==1)
        {
            cr.setVisible(false);
        }
        if(cou2==1)
        {
            cbr.setVisible(false);
        }
        if(cou3==1)
        {
            hr.setVisible(false);
        }
        
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        jList1.clearSelection();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Object selectedValues[]=jList1.getSelectedValues();
        
        String sval="";
        for(int i=0;i<selectedValues.length;i++)
        {
            sval=sval+selectedValues[i].toString().trim()+"@";
        }
        String interest=sval.substring(0,sval.lastIndexOf('@'));
        
        try
        {            
            st.execute("update UserRegister set Interest='"+interest.trim()+"' where Name='"+name.trim()+"'");
            JOptionPane.showMessageDialog(this,"Submitted Successfully!");
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:        
        String domainName=jComboBox1.getSelectedItem().toString().trim();
        jComboBox2.removeAllItems();
        jComboBox2.addItem("<--Select-->");
        
        try
        {                        
            ResultSet rs=st.executeQuery("select * from UploadItems where DomainName='"+domainName.trim()+"'");
            while(rs.next())
            {
                String itemname=rs.getString(1);
                String domname=rs.getString(2);
                String itemcomp=rs.getString(3);
                String desc=rs.getString(4);
                String pop=rs.getString(5);
                
                jComboBox2.addItem(itemname.trim());
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jComboBox2ItemStateChanged

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String review=jComboBox3.getSelectedItem().toString().trim();
        String popularity=jTextField2.getText().trim();
        String domainname=jComboBox1.getSelectedItem().toString().trim();
        String itemname=jComboBox2.getSelectedItem().toString().trim();
        
        int forpopularity=0;
        
        if(review.trim().equals("Very Good"))
        {
            forpopularity=2;
        }
        else if(review.trim().equals("Good"))
        {
            forpopularity=1;
        }
        else if(review.trim().equals("Bad"))
        {
            forpopularity=-1;
        }
        else if(review.trim().equals("Very Bad"))
        {
            forpopularity=-2;
        }
        
        int totalpopu=Integer.parseInt(popularity.trim())+forpopularity;
        
        try
        {
            ResultSet rs=st.executeQuery("select * from Review where ItemName='"+itemname.trim()+"' and DomainName='"+domainname.trim()+"' and UserName='"+name.trim()+"'");
            if(rs.next())
            {
                JOptionPane.showMessageDialog(this, "It is already reviewed by You!");                
            }
            else
            {
                st.executeUpdate("insert into Review values('"+itemname.trim()+"','"+domainname.trim()+"','"+name.trim()+"','"+review.trim()+"')");
                
                st.execute("update UploadItems set Popularity='"+totalpopu+"' where ItemName='"+itemname.trim()+"' and DomainName='"+domainname.trim()+"'");
                
                JOptionPane.showMessageDialog(this, "Submitted Successfully!");                                    
            }                                                
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        jComboBox1.setSelectedIndex(0);
        jComboBox2.removeAllItems();
        jComboBox2.addItem("<--Select-->");
        jComboBox2.setSelectedIndex(0);
        jTextField1.setText("");
        jTextArea1.setText("");
        jTextField2.setText("");
        jComboBox3.setSelectedIndex(0);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        
        jTextArea2.setText("");
        
           /* Collaborative Filtering Based on Threshold Based Similarity Transitivity */
        
        System.out.println("===========================Collaborative Started===========================\n");
        jTextArea2.append("===========================Collaborative Started===========================\n");
        
        ArrayList similarUsers=new ArrayList();
        String sourceaddressinterest=adrss.trim()+" "+inters.trim().replaceAll("@"," ");
        int threshold=50;       // above 50 percentage is similar. so threshold is 50
        try
        {
            ResultSet rs=st.executeQuery("select * from UserRegister");                       
            while(rs.next())
            {                                                  
                String na=rs.getString(3); 
                String adrs=rs.getString(5); 
                String inter=rs.getString(6);
                if(!(name.trim().equals(na.trim())))
                {
                    String destinationaddressinterest=adrs.trim()+" "+inter.trim().replaceAll("@"," ");
                    int similarity=lock_match(sourceaddressinterest.toLowerCase().trim(), destinationaddressinterest.toLowerCase().trim());
                    if(similarity>threshold)
                    {
                        if(!(similarUsers.contains(na.trim())))
                        {
                            similarUsers.add(na.trim());
                        }
                    }
                }                
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        System.out.println("Similar Users for "+name.trim()+": "+similarUsers);
        jTextArea2.append("Similar Users for "+name.trim()+": "+similarUsers+"\n");
        
        ArrayList itemsReviewdbyU=new ArrayList();
        try
        {
            ResultSet rs=st.executeQuery("select * from Review where UserName='"+name.trim()+"'");
            while(rs.next())
            {
                String itemname=rs.getString(1);
                String domainname=rs.getString(2);
                
                String itemwithdomain=itemname.trim()+"#"+domainname.trim();
                
                if(!(itemsReviewdbyU.contains(itemwithdomain.trim())))
                {
                    itemsReviewdbyU.add(itemwithdomain.trim());
                }
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        System.out.println("Items Reviewed By "+name.trim()+": "+itemsReviewdbyU);
        jTextArea2.append("Items Reviewed By "+name.trim()+": "+itemsReviewdbyU+"\n");
        
        CollaborativeFiteringResults=new ArrayList();
        
        for(int i=0;i<similarUsers.size();i++)
        {
            String simiUser=similarUsers.get(i).toString().trim();
            
            ArrayList itemsReviewdbysimiUser=new ArrayList();
            try
            {
                ResultSet rs=st.executeQuery("select * from Review where UserName='"+simiUser.trim()+"'");
                while(rs.next())
                {
                    String itemname=rs.getString(1);
                    String domainname=rs.getString(2);
                
                    String itemwithdomain=itemname.trim()+"#"+domainname.trim();
                
                    if(!(itemsReviewdbysimiUser.contains(itemwithdomain.trim())))
                    {
                        itemsReviewdbysimiUser.add(itemwithdomain.trim());
                    }
                }
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        
            System.out.println("Items Reviewed By "+simiUser.trim()+": "+itemsReviewdbysimiUser);
            jTextArea2.append("Items Reviewed By "+simiUser.trim()+": "+itemsReviewdbysimiUser+"\n");
            
            if(itemsReviewdbysimiUser.containsAll(itemsReviewdbyU))
            {
                for(int j=0;j<itemsReviewdbysimiUser.size();j++)
                {
                    String itemwithdomain=itemsReviewdbysimiUser.get(j).toString().trim();
                    if(!(itemsReviewdbyU.contains(itemwithdomain.trim())))
                    {                                                
                        System.out.println("Recommended By "+simiUser.trim()+": "+itemwithdomain.trim());
                        jTextArea2.append("Recommended By "+simiUser.trim()+": "+itemwithdomain.trim()+"\n");
                        if(!(CollaborativeFiteringResults.contains(itemwithdomain.trim())))
                        {
                            CollaborativeFiteringResults.add(itemwithdomain.trim());
                        }
                    }
                }
            }
            System.out.println();
            jTextArea2.append("\n");
        }
        
        System.out.println("===========================Collaborative Finished===========================\n\n");
        jTextArea2.append("===========================Collaborative Finished===========================\n\n\n");
        
                /* Content Based Filtering */
        
        System.out.println("===========================Content Based Started===========================\n");
        jTextArea2.append("===========================Content Based Started===========================\n\n");
        
        System.out.println("Items Reviewed By "+name.trim()+": "+itemsReviewdbyU);
        jTextArea2.append("Items Reviewed By "+name.trim()+": "+itemsReviewdbyU+"\n");
        
        ContentBasedFilteringResults=new ArrayList();
        try
        {            
            ResultSet rs=st.executeQuery("select * from UploadItems");
            while(rs.next())
            {
                String itemname=rs.getString(1);
                String domainname=rs.getString(2);
                String itemwithdomain=itemname.trim()+"#"+domainname.trim();
                String srcitemwithdomain=itemwithdomain.trim().replaceAll("#"," ");
                if(!(itemsReviewdbyU.contains(itemwithdomain.trim())))
                {
                    for(int i=0;i<itemsReviewdbyU.size();i++)
                    {
                        String destiitemwithdomain=itemsReviewdbyU.get(i).toString().trim().replaceAll("#"," ");
                        int similarity=lock_match(srcitemwithdomain.toLowerCase().trim(), destiitemwithdomain.toLowerCase().trim());
                        if(similarity>threshold)
                        {
                            if(!(ContentBasedFilteringResults.contains(itemwithdomain.trim())))
                            {
                                ContentBasedFilteringResults.add(itemwithdomain.trim());
                                System.out.println("Recommended Item: "+itemwithdomain.trim());
                                jTextArea2.append("Recommended Item: "+itemwithdomain.trim()+"\n");
                                break;
                            }
                        }
                    }
                }
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }        
        
        System.out.println("\n===========================Content Based Finished===========================\n\n");
        jTextArea2.append("\n===========================Content Based Finished===========================\n\n\n");
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseClicked
        // TODO add your handling code here:        
        String domainname=jComboBox1.getSelectedItem().toString().trim();
        String itemname=jComboBox2.getSelectedItem().toString().trim();
        
        try
        {                        
            ResultSet rs=st.executeQuery("select * from UploadItems where ItemName='"+itemname.trim()+"' and DomainName='"+domainname.trim()+"'");
            if(rs.next())
            {                
                String itemcomp=rs.getString(3);
                String desc=rs.getString(4);
                String pop=rs.getString(5);
                
                jTextField1.setText(itemcomp.trim());
                jTextArea1.setText(desc.trim());
                jTextField2.setText(pop.trim());
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jTextField1MouseClicked

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        cr=new CollaborativeResults();
        cr.setTitle("User - "+name);
        cr.setVisible(true);
        cr.setResizable(false);
        cou1=1;
        
        for(int i=0;i<CollaborativeFiteringResults.size();i++)
        {
            String itemwithdomain=CollaborativeFiteringResults.get(i).toString().trim();
            String sp[]=itemwithdomain.trim().split("#");
            
            try
            {
                ResultSet rs=st.executeQuery("select * from UploadItems where ItemName='"+sp[0].trim()+"' and DomainName='"+sp[1].trim()+"'");
                if(rs.next())
                {
                    String itemname=rs.getString(1);
                    String domname=rs.getString(2);
                    String itemcomp=rs.getString(3);
                    String desc=rs.getString(4);
                    String pop=rs.getString(5);
                    
                    DefaultTableModel dm=(DefaultTableModel)cr.jTable2.getModel();
                    Vector v=new Vector();
                    v.add(itemname.trim());
                    v.add(domname.trim());
                    v.add(itemcomp.trim());
                    v.add(desc.trim());
                    v.add(pop.trim());
                    dm.addRow(v);
                }
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }            
        }        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        cbr=new ContentBasedResults();
        cbr.setTitle("User - "+name);
        cbr.setVisible(true);
        cbr.setResizable(false);
        cou2=1;
        
        for(int i=0;i<ContentBasedFilteringResults.size();i++)
        {
            String itemwithdomain=ContentBasedFilteringResults.get(i).toString().trim();
            String sp[]=itemwithdomain.trim().split("#");
            
            try
            {
                ResultSet rs=st.executeQuery("select * from UploadItems where ItemName='"+sp[0].trim()+"' and DomainName='"+sp[1].trim()+"'");
                if(rs.next())
                {
                    String itemname=rs.getString(1);
                    String domname=rs.getString(2);
                    String itemcomp=rs.getString(3);
                    String desc=rs.getString(4);
                    String pop=rs.getString(5);
                    
                    DefaultTableModel dm=(DefaultTableModel)cbr.jTable2.getModel();
                    Vector v=new Vector();
                    v.add(itemname.trim());
                    v.add(domname.trim());
                    v.add(itemcomp.trim());
                    v.add(desc.trim());
                    v.add(pop.trim());
                    dm.addRow(v);
                }
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }            
        }        
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        
        ArrayList hybridResult=new ArrayList();
        for(int i=0;i<CollaborativeFiteringResults.size();i++)
        {
            String itemwithdomain=CollaborativeFiteringResults.get(i).toString().trim();
            if(!(hybridResult.contains(itemwithdomain.trim())))
            {
                hybridResult.add(itemwithdomain.trim());
            }
        }
        
        for(int i=0;i<ContentBasedFilteringResults.size();i++)
        {
            String itemwithdomain=ContentBasedFilteringResults.get(i).toString().trim();
            if(!(hybridResult.contains(itemwithdomain.trim())))
            {
                hybridResult.add(itemwithdomain.trim());
            }
        }
        
        hr=new HybridResults();
        hr.setTitle("User - "+name);
        hr.setVisible(true);
        hr.setResizable(false);
        cou3=1;
        
        for(int i=0;i<hybridResult.size();i++)
        {
            String itemwithdomain=hybridResult.get(i).toString().trim();
            String sp[]=itemwithdomain.trim().split("#");
            
            try
            {
                ResultSet rs=st.executeQuery("select * from UploadItems where ItemName='"+sp[0].trim()+"' and DomainName='"+sp[1].trim()+"'");
                if(rs.next())
                {
                    String itemname=rs.getString(1);
                    String domname=rs.getString(2);
                    String itemcomp=rs.getString(3);
                    String desc=rs.getString(4);
                    String pop=rs.getString(5);
                    
                    DefaultTableModel dm=(DefaultTableModel)hr.jTable2.getModel();
                    Vector v=new Vector();
                    v.add(itemname.trim());
                    v.add(domname.trim());
                    v.add(itemcomp.trim());
                    v.add(desc.trim());
                    v.add(pop.trim());
                    dm.addRow(v);
                }
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }            
        }        
    }//GEN-LAST:event_jButton9ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new UserFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    public static int lock_match(String s, String t) 
    {
        int totalw = word_count(s);
        int total = 100;
        int perw = total / totalw;
        int gotperw = 0;

        if (!s.equals(t)) {

            for (int i = 1; i <= totalw; i++) {
                if (simple_match(split_string(s, i), t) == 1) {
                    gotperw = ((perw * (total - 10)) / total) + gotperw;
                } else if (front_full_match(split_string(s, i), t) == 1) {
                    gotperw = ((perw * (total - 20)) / total) + gotperw;
                } else if (anywhere_match(split_string(s, i), t) == 1) {
                    gotperw = ((perw * (total - 30)) / total) + gotperw;
                } else {
                    gotperw = ((perw * smart_match(split_string(s, i), t)) / total) + gotperw;
                }
            }
        } else {
            gotperw = 100;
        }
        return gotperw;
    }

    public static int anywhere_match(String s, String t) {
        int x = 0;
        if (t.contains(s)) {
            x = 1;
        }
        return x;
    }

    public static int front_full_match(String s, String t) {
        int x = 0;
        String tempt;
        int len = s.length();

        //----------Work Body----------//
        for (int i = 1; i <= word_count(t); i++) {
            tempt = split_string(t, i);
            if (tempt.length() >= s.length()) {
                tempt = tempt.substring(0, len);
                if (s.contains(tempt)) {
                    x = 1;
                    break;
                }
            }
        }
        //---------END---------------//
        if (len == 0) {
            x = 0;
        }
        return x;
    }

    public static int simple_match(String s, String t) {
        int x = 0;
        String tempt;
        int len = s.length();


        //----------Work Body----------//
        for (int i = 1; i <= word_count(t); i++) {
            tempt = split_string(t, i);
            if (tempt.length() == s.length()) {
                if (s.contains(tempt)) {
                    x = 1;
                    break;
                }
            }
        }
        //---------END---------------//
        if (len == 0) {
            x = 0;
        }
        return x;
    }

    public static int smart_match(String ts, String tt) {

        char[] s = new char[ts.length()];
        s = ts.toCharArray();
        char[] t = new char[tt.length()];
        t = tt.toCharArray();


        int slen = s.length;
        //number of 3 combinations per word//
        int combs = (slen - 3) + 1;
        //percentage per combination of 3 characters//
        int ppc = 0;
        if (slen >= 3) {
            ppc = 100 / combs;
        }
        //initialising an integer to store the total % this class genrate//
        int x = 0;
        //declaring a temporary new source char array
        char[] ns = new char[3];
        //check if source char array has more then 3 characters//
        if (slen < 3) {
        } else {
            for (int i = 0; i < combs; i++) {
                for (int j = 0; j < 3; j++) {
                    ns[j] = s[j + i];
                }
                if (cross_full_match(ns, t) == 1) {
                    x = x + 1;
                }
            }
        }
        x = ppc * x;
        return x;
    }

    /**
     *
     * @param s
     * @param t
     * @return
     */
    public static int  cross_full_match(char[] s, char[] t) {
        int z = t.length - s.length;
        int x = 0;
        if (s.length > t.length) {
            return x;
        } else {
            for (int i = 0; i <= z; i++) {
                for (int j = 0; j <= (s.length - 1); j++) {
                    if (s[j] == t[j + i]) {
                        // x=1 if any charecer matches
                        x = 1;
                    } else {
                        // if x=0 mean an character do not matches and loop break out
                        x = 0;
                        break;
                    }
                }
                if (x == 1) {
                    break;
                }
            }
        }
        return x;
    }

    public static String split_string(String s, int n) {

        int index;
        String temp;
        temp = s;
        String temp2 = null;

        int temp3 = 0;

        for (int i = 0; i < n; i++) {
            int strlen = temp.length();
            index = temp.indexOf(" ");
            if (index < 0) {
                index = strlen;
            }
            temp2 = temp.substring(temp3, index);
            temp = temp.substring(index, strlen);
            temp = temp.trim();

        }
        return temp2;
    }

    public static int word_count(String s) {
        int x = 1;
        int c;
        s = s.trim();
        if (s.isEmpty()) {
            x = 0;
        } else {
            if (s.contains(" ")) {
                for (;;) {
                    x++;
                    c = s.indexOf(" ");
                    s = s.substring(c);
                    s = s.trim();
                    if (s.contains(" ")) {
                    } else {
                        break;
                    }
                }
            }
        }
        return x;
    }
}
